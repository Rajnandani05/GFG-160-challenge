
class Solution {
    public ArrayList<Integer> maxOfMins(int[] arr) {
        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i < n; i++){
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for(int i = n - 1; i >= 0; i--){
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        int[] result = new int[n + 1];
        for(int i = 0; i < n; i++){
            int len = right[i] - left[i] - 1;
            result[len] = Math.max(result[len], arr[i]);
        }
        for (int i = n - 1; i >= 1; i--){
            result[i] = Math.max(result[i], result[i + 1]);
        }
        ArrayList<Integer> res = new ArrayList<>(n);
        for (int i = 1; i <= n; i++){
            res.add(result[i]);
        }
        return res;
    }
}
